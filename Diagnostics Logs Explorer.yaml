dependencies: []
modules: []
exported_table_schema: []
services:
- source: /runtime/services/tables.yml
  client_config: {}
  server_config: {}
forms:
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  components:
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: ColumnPanel
      properties: {col_widths: '{}'}
      name: column_panel_1
      layout_properties: {grid_position: 'HGDUSW,DPVHRB'}
      components:
      - type: DataGrid
        properties:
          role: null
          columns:
          - {id: WZFMNN, title: <No data>, data_key: column_1, $$hashKey: 'object:25541'}
          auto_header: true
          tooltip: ''
          border: ''
          foreground: ''
          rows_per_page: 3
          visible: true
          wrap_on: never
          show_page_controls: true
          spacing_above: small
          spacing_below: small
          background: ''
        name: dg_result
        layout_properties: {grid_position: 'JFRWCS,IFCXEK', full_width_row: true}
        components:
        - type: RepeatingPanel
          properties: {spacing_above: none, spacing_below: none, item_template: MainForm.RowTemplate1}
          name: repeating_panel_1
          layout_properties: {}
        data_bindings: []
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: Az container SAS URL, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: 'fa:thumbs-o-up'}
      name: label_1
      layout_properties: {grid_position: 'LPWDFQ,MFDECC'}
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: <No storage account selected>, font_size: null, font: '',
        spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: lbl_az_containerurl
      layout_properties: {grid_position: 'LPWDFQ,WKMULO'}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: Select Az Storage Account, font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: btn_select_az_storage_account
      layout_properties: {grid_position: 'LPWDFQ,TDYVWL'}
      event_bindings: {click: btn_select_az_storage_account_click}
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: From datetime, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: ''}
      name: lbl_dt_from
      layout_properties: {grid_position: 'PKGHLL,BJSYUW'}
    - type: DatePicker
      properties: {}
      name: dt_from
      layout_properties: {grid_position: 'PKGHLL,DMWXOV'}
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: To datetime, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: ''}
      name: lbl_dt_to
      layout_properties: {grid_position: 'XYMFZV,RVQKRQ'}
    - type: DatePicker
      properties: {}
      name: dt_to
      layout_properties: {grid_position: 'XYMFZV,SKYXCY'}
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: Fetch data operation, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: 'fa:thumbs-o-up'}
      name: label_2
      layout_properties: {grid_position: 'BZLTKI,FLWRCU'}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: Fetch, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: ''}
      name: btn_fetch
      layout_properties: {grid_position: 'BZLTKI,QOOBMW'}
      event_bindings: {click: btn_fetch_click}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  code: "from ._anvil_designer import MainFormTemplate\nfrom anvil import *\nimport\
    \ anvil.server\n\nclass MainForm(MainFormTemplate):\n  def __init__(self, **properties):\n\
    \    # Set Form properties and Data Bindings.\n    self.init_components(**properties)\n\
    \    print(\"[INFO] properties\", properties)\n    self.handle_az_storage_account(properties)\n\
    \    self.dg_result.role = 'wide'\n\n    import datetime\n    now = datetime.datetime.now()\n\
    \    # format = '%Y-%m-%d %H:%M'\n    format = '%Y-%m-%d'\n    self.dt_from.format\
    \ = format\n    self.dt_to.format = format\n    self.dt_from.date = now.strftime(format)\n\
    \    self.dt_to.date = now.strftime(format)\n    # Any code you write here will\
    \ run before the form opens.\n\n  def btn_select_az_storage_account_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    # CPPXAXA - Uncomment\n    open_form('SelectStorageAccount')\n    pass\n\
    \n  def handle_az_storage_account(self, properties):\n    self.az_containerurl\
    \ = None\n\n    if \"containerurl\" in properties:\n      self.az_containerurl\
    \ = properties[\"containerurl\"]\n      self.lbl_az_containerurl.text = self.az_containerurl[:50]\
    \ + \" ...\"\n\n  def btn_fetch_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    from anvil.js.window import\
    \ alerter\n    from anvil.js.window import list_files\n    # alerter()\n    \n\
    \    if self.dt_from.date is None:\n      alerter(\"From date cannot be blank\"\
    )\n      return\n    if self.dt_to.date is None:\n      alerter(\"To date cannot\
    \ be blank\")\n      return\n\n    if self.dt_to.date <= self.dt_from.date:\n\
    \      alerter(\"To date cannot be less than or equals from date\")\n      return\n\
    \      \n    \n    self.clear_table()\n    # self.add_to_table({\"name\": \"abc\"\
    , \"roll\": \"123\"})\n    # self.add_to_table({\"name\": \"def\"})\n    from_date\
    \ = str(self.dt_from.date) + \" 00:00\"\n    to_date = str(self.dt_to.date) +\
    \ \" 00:00\"\n    \n    list_files(\\\n      self.az_containerurl,\\\n      from_date,\\\
    \n      to_date,\\\n      self.clear_table,\\\n      self.add_to_table)\n    pass\n\
    \    \n  def clear_table(self):\n    self.dg_result.clear()\n    self.records\
    \ = []\n    self.record_columns = set()\n\n  def __update_columns(self, record):\n\
    \    for k in record:\n      if not (k in self.record_columns):\n        self.record_columns.add(k)\n\
    \n    widths = {\n      \"time\": 250,\n      \"category\": 100,\n      \"operationName\"\
    : 130,\n      \"correlationId\": 300,\n      \"callerIpAddress\": 130,\n     \
    \ \"operationVersion\": 130,\n      \"resultSignature\": 130,\n      \"durationMs\"\
    : 100,\n      \"properties\": 500,\n      \"resultType\": 130\n    }\n    \n \
    \   new_columns = []\n    for k in self.record_columns:\n      width = 350\n \
    \     if k in widths:\n        width = widths[k]\n      new_columns.append({ \"\
    id\": k, \"title\": k, \"data_key\": k, \"width\": width })\n\n    self.dg_result.clear()\n\
    \    self.dg_result.columns = new_columns\n\n    for val in self.records:\n  \
    \    self.__add_to_table_helper(val)\n  \n  def __add_to_table_helper(self, record):\n\
    \    row = DataRowPanel(item=record)\n    self.dg_result.add_component(row)\n\n\
    \  def add_to_table(self, record):\n    print(\"[INFO] add_to_table\", record)\n\
    \    record = dict(record)\n    self.__update_columns(record)\n    self.records.append(record)\n\
    \    self.__add_to_table_helper(record)\n  "
  class_name: MainForm
  id: KDSHKD4EDWHHO3NYB3WJILPKI4W4OPWA
- container: {type: DataRowPanel}
  components: []
  is_package: true
  code: "from ._anvil_designer import RowTemplate1Template\nfrom anvil import *\n\
    import anvil.server\n\nclass RowTemplate1(RowTemplate1Template):\n  def __init__(self,\
    \ **properties):\n    # Set Form properties and Data Bindings.\n    self.init_components(**properties)\n\
    \n    # Any code you write here will run before the form opens.\n"
  class_name: MainForm.RowTemplate1
  id: '1670741779283137494120672.51764'
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  components:
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: Enter container SAS URL, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: ''}
      name: label_1
      layout_properties: {grid_position: 'EMYEEX,FZEGUC'}
    - type: TextBox
      properties: {role: null, align: left, hide_text: false, tooltip: '', placeholder: Enter container SAS URL ...,
        border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
        font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
        background: '', bold: false, underline: false}
      name: txt_containerurl
      layout_properties: {grid_position: 'FULXUF,WNZGQP'}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: Select, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: ''}
      name: btn_select
      layout_properties: {grid_position: 'SBWRYR,SRAHTK'}
      event_bindings: {click: btn_select_click}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  code: "from ._anvil_designer import SelectStorageAccountTemplate\nfrom anvil import\
    \ *\nimport anvil.server\n\nclass SelectStorageAccount(SelectStorageAccountTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run before the form opens.\n\n  def btn_select_click(self, **event_args):\n\
    \    \"\"\"This method is called when the button is clicked\"\"\"\n    open_form('MainForm',\
    \ containerurl=self.txt_containerurl.text)\n    pass\n\n"
  class_name: SelectStorageAccount
  id: '1670741910924555714715713.8068'
startup: {type: form, module: MainForm}
package_name: Diagnostics_Logs_Explorer
allow_embedding: false
name: Diagnostics Logs Explorer
runtime_options: {version: 2, client_version: '3', server_version: python3-sandbox,
  server_spec: null}
metadata: {title: Diagnostics Logs Explorer}
startup_form: null
native_deps: {head_html: "<!-- <script src=\"https://cdn.jsdelivr.net/npm/@azure/storage-blob@12.12.0/dist/index.min.js\"\
    ></script> -->\n<script src=\"_/theme/azure-storage-blob.js\"></script>\n<script>\n\
    \  function alerter(message) {\n    alert(message);\n  }\n\n//   var blobServiceClient\
    \ = new BlobServiceClient(\"https://px0storage.blob.core.windows.net/?sv=2021-06-08&ss=bfqt&srt=c&sp=rwdlacupiytfx&se=2022-12-31T00:46:13Z&st=2022-12-11T16:46:13Z&spr=https&sig=YvW6Lp1sfhforMzHC4SUoqadySdzoh56Bvo6SroqmP0%3D\"\
    );\n    \n\n  function list_files(containerurl, dt_from, dt_to, clear_callback,\
    \ add_callback) {\n    console.log(\"[INFO] callback can be called as callback().\
    \ It will handle the self part.\", containerurl, dt_from, dt_to);\n    clear_callback();\n\
    \n    async function blobToString(blob) {\n      const fileReader = new FileReader();\n\
    \      return new Promise((resolve, reject) => {\n        fileReader.onloadend\
    \ = (ev) => {\n          resolve(ev.target.result);\n        };\n        fileReader.onerror\
    \ = reject;\n        fileReader.readAsText(blob);\n      });\n    }\n\n    function\
    \ isRoiBlob(blob_name, dt_from, dt_to) {\n      toks = blob_name.split('/');\n\
    \      var shortlisted = [];\n      for (var tok of toks) {\n        if (tok.length\
    \ > 0 && tok.includes(\"=\") && tok[tok.length - 1] != \"=\") {\n          shortlisted.push(tok);\n\
    \        }\n      }\n      console.log(\"shortlisted\", shortlisted);\n\n    \
    \  var timestampVals = [];\n      for (var pair of shortlisted) {\n        tuple\
    \ = pair.split(\"=\");\n        timestampVals.push(tuple[1]);\n      }\n     \
    \ var timestamp = timestampVals[0] + '-' + timestampVals[1] + '-' + timestampVals[2]\
    \ + ' ' + timestampVals[3] + ':' + timestampVals[4];\n      console.log(\"timestamp\"\
    , timestamp);\n\n      var result = timestamp >= dt_from && timestamp <= dt_to;\n\
    \      console.log(\"isRoiBlob\", result, timestamp, dt_from, dt_to);\n      return\
    \ result;\n    }\n    \n    const containerURL = new azblob.ContainerURL(\n  \
    \    // \"https://px0storage.blob.core.windows.net/insights-logs-auditevent?sp=rl&st=2022-12-11T17:53:07Z&se=2022-12-31T01:53:07Z&spr=https&sv=2021-06-08&sr=c&sig=JBFQ5ltH2T7GeVLkRbJmOSBJy%2Bni6b%2FabkNkg7PIeZ8%3D\"\
    ,\n      containerurl,\n      azblob.StorageURL.newPipeline(new azblob.AnonymousCredential));\n\
    \  \n    const listFiles = async () => {\n      try {\n        console.log(\"\
    Retrieving file list...\");\n        let marker = undefined;\n        do {\n \
    \         const listBlobsResponse = await containerURL.listBlobFlatSegment(\n\
    \            azblob.Aborter.none, marker);\n          marker = listBlobsResponse.nextMarker;\n\
    \          const items = listBlobsResponse.segment.blobItems;\n          for (const\
    \ blob of items) {\n            console.log(`Blob name`, blob.name);\n\n     \
    \       if (! isRoiBlob(blob.name, dt_from, dt_to)) {\n              continue;\n\
    \            }\n            \n            var blobURL = azblob.BlobURL.fromContainerURL(containerURL,\
    \ blob.name);\n            console.log(\"blobURL\", blobURL);\n            blobURL.url\
    \ = azblob.BlobURL.fromContainerURL(containerURL, \"\").url + blob.name;\n   \
    \         console.log(\"### blobURL\", blobURL);\n\n            var baseLineImage\
    \ = await blobURL.download();\n            console.log(\"baseLineImage\", baseLineImage);\n\
    \n            const downloaded = await blobToString(await baseLineImage.blobBody);\n\
    \            console.log(\"Downloaded blob content\", downloaded.split(\"\\r\\\
    n\"));\n\n            for (var serializedLog of downloaded.split(\"\\r\\n\"))\
    \ {\n              if (serializedLog != \"\") {\n                console.log(serializedLog);\n\
    \                var value = JSON.parse(serializedLog.toString());\n\n       \
    \         add_callback(value);\n              }\n            }\n\n           \
    \ // CPPXAXA.\n            // break;\n          }\n        } while (marker);\n\
    \      } catch (error) {\n        console.log(\"error\", error);\n      }\n  \
    \  };\n    \n    listFiles();\n  }\n</script>"}
dependency_order: []
extra_files: {__init__.py: IwojIFRoaXMgcmVwb3NpdG9yeSBpcyBhbiBBbnZpbCBhcHAuIExlYXJuIG1vcmUgYXQgaHR0cHM6Ly9hbnZpbC53b3Jrcy8KIyBUbyBydW4gdGhlIHNlcnZlci1zaWRlIGNvZGUgb24geW91ciBvd24gbWFjaGluZSwgcnVuOgojIHBpcCBpbnN0YWxsIGFudmlsLXVwbGluawojIHB5dGhvbiAtbSBhbnZpbC5ydW5fYXBwX3ZpYV91cGxpbmsgWW91ckFwcFBhY2thZ2VOYW1lCgpfX3BhdGhfXyA9IFtfX3BhdGhfX1swXSArICIvc2VydmVyX2NvZGUiLCBfX3BhdGhfX1swXSArICIvY2xpZW50X2NvZGUiXQo=}
dependency_code: {}
theme:
  templates:
  - name: Standard Page
    description: A page with an app bar and an optional sidebar.
    img: img/form-templates/material-design-3.png
    form:
      class_name: Form
      is_package: true
      container:
        type: HtmlTemplate
        properties: {html: '@theme:standard-page.html'}
      components:
      - type: ColumnPanel
        properties: {}
        name: content_panel
        layout_properties: {slot: default}
      - type: FlowPanel
        properties: {}
        name: navbar_links
        layout_properties: {slot: nav-right}
      code: "from ._anvil_designer import $NAME$Template\nfrom anvil import *\n\n\
        class $NAME$($NAME$Template):\n\n  def __init__(self, **properties):\n   \
        \ # Set Form properties and Data Bindings.\n    self.init_components(**properties)\n\
        \n    # Any code you write here will run before the form opens.\n    \n"
  parameters:
    roles:
    - name: input-prompt
      components: [Label]
    - name: selected
      components: [Link]
    - name: outlined-card
      components: [ColumnPanel, LinearPanel, XYPanel, RepeatingPanel]
      display_in_toolbox: true
      title: Outlined Card
    - name: elevated-card
      components: [ColumnPanel, LinearPanel, XYPanel, RepeatingPanel]
      display_in_toolbox: false
      title: Elevated Card
    - name: tonal-card
      components: [ColumnPanel, LinearPanel, XYPanel, RepeatingPanel]
      display_in_toolbox: false
      title: Tonal Card
    - name: outlined-button
      components: [Button, FileLoader]
      display_in_toolbox: true
      title: Outlined Button
    - name: filled-button
      components: [Button, FileLoader]
      display_in_toolbox: false
      title: Filled Button
    - name: elevated-button
      components: [Button, FileLoader]
      display_in_toolbox: false
      title: Elevated Button
    - name: tonal-button
      components: [Button, FileLoader]
      display_in_toolbox: false
      title: Tonal Button
    - name: outlined
      components: [TextBox, TextArea, DatePicker, DropDown]
      display_in_toolbox: true
      title: Outlined TextBox
    - name: display
      components: [Label, Link]
    - name: headline
      components: [Label, Link]
    - name: title
      components: [Label, Link]
    - name: body
      components: [Label, Link]
    - name: tonal-data-grid
      components: [DataGrid]
    - name: outlined-error
      components: [TextBox, TextArea, DatePicker, DropDown]
    - name: input-error
      components: [TextBox, TextArea, DatePicker, DropDown]
    color_scheme:
      preset_groups:
      - name: Colour Scheme
        options:
        - name: Material Light
          colors:
          - {name: Primary, color: '#6750A4'}
          - {name: Primary Container, color: '#EADDFF'}
          - {name: On Primary, color: '#FFFFFF'}
          - {name: On Primary Container, color: '#21005E'}
          - {name: Secondary, color: '#625B71'}
          - {name: Secondary Container, color: '#E8DEF8'}
          - {name: On Secondary, color: '#FFFFFF'}
          - {name: On Secondary Container, color: '#1E192B'}
          - {name: Tertiary, color: '#7D5260'}
          - {name: Tertiary Container, color: '#FFD8E4'}
          - {name: On Tertiary, color: '#FFFFFF'}
          - {name: On Tertiary Container, color: '#370B1E'}
          - {name: Error, color: '#B3261E'}
          - {name: Background, color: '#FFFBFE'}
          - {name: Surface, color: '#FFFBFE'}
          - {name: On Background, color: '#1C1B1F'}
          - {name: On Surface, color: '#1C1B1F'}
          - {name: Surface Variant, color: '#E7E0EC'}
          - {name: On Surface Variant, color: '#49454E'}
          - {name: Outline, color: '#79747E'}
          - {name: On Disabled, color: 'rgba(28, 27, 31, 0.38)'}
          - {name: Disabled Container, color: 'rgba(28, 27, 31, 0.12)'}
          - {name: Light Overlay 1, color: 'rgba(255, 255, 255, 0.08)'}
          - {name: Light Overlay 2, color: 'rgba(255, 255, 255, 0.12)'}
          - {name: Dark Overlay 1, color: 'rgba(30, 25, 43, 0.08)'}
          - {name: Dark Overlay 2, color: 'rgba(30, 25, 43, 0.12)'}
          - {name: Primary Overlay 1, color: 'rgba(103, 80, 164, 0.05)'}
          - {name: Primary Overlay 2, color: 'rgba(103, 80, 164, 0.08)'}
          - {name: Primary Overlay 3, color: 'rgba(103, 80, 164, 0.11)'}
        - name: Material Dark
          colors:
          - {name: Primary, color: '#D0BCFF'}
          - {name: Primary Container, color: '#4F378B'}
          - {name: On Primary, color: '#371E73'}
          - {name: On Primary Container, color: '#EADDFF'}
          - {name: Secondary, color: '#CCC2DC'}
          - {name: Secondary Container, color: '#4A4458'}
          - {name: On Secondary, color: '#332D41'}
          - {name: On Secondary Container, color: '#E8DEF8'}
          - {name: Tertiary, color: '#EFB8C8'}
          - {name: Tertiary Container, color: '#633B48'}
          - {name: On Tertiary, color: '#492532'}
          - {name: On Tertiary Container, color: '#FFD8E4'}
          - {name: Error, color: '#F2B8B5'}
          - {name: Background, color: '#1C1B1F'}
          - {name: Surface, color: '#1C1B1F'}
          - {name: On Background, color: '#E6E1E5'}
          - {name: On Surface, color: '#E6E1E5'}
          - {name: Surface Variant, color: '#49454F'}
          - {name: On Surface Variant, color: '#CAC4D0'}
          - {name: Outline, color: '#938F99'}
          - {name: On Disabled, color: 'rgba(230, 225, 229, 0.38)'}
          - {name: Disabled Container, color: 'rgba(230, 225, 229, 0.12)'}
          - {name: Light Overlay 1, color: 'rgba(232, 222, 248, 0.08)'}
          - {name: Light Overlay 2, color: 'rgba(232, 222, 248, 0.12)'}
          - {name: Dark Overlay 1, color: 'rgba(232, 222, 248, 0.08)'}
          - {name: Dark Overlay 2, color: 'rgba(232, 222, 248, 0.12)'}
          - {name: Primary Overlay 1, color: 'rgba(208, 188, 255, 0.05)'}
          - {name: Primary Overlay 2, color: 'rgba(208, 188, 255, 0.08)'}
          - {name: Primary Overlay 3, color: 'rgba(208, 188, 255, 0.11)'}
        - name: Rally Dark
          colors:
          - {name: Primary, color: '#1EB980'}
          - {name: Primary Container, color: '#005235'}
          - {name: On Primary, color: '#003824'}
          - {name: On Primary Container, color: '#73FBBC'}
          - {name: Secondary, color: '#B4CCBC'}
          - {name: Secondary Container, color: '#364B3F'}
          - {name: On Secondary, color: '#20352A'}
          - {name: On Secondary Container, color: '#D0E8D8'}
          - {name: Tertiary, color: '#A4CDDD'}
          - {name: Tertiary Container, color: '#234C5A'}
          - {name: On Tertiary, color: '#063542'}
          - {name: On Tertiary Container, color: '#C0E9FA'}
          - {name: Error, color: '#D64D47'}
          - {name: Background, color: '#191C1A'}
          - {name: Surface, color: '#191C1A'}
          - {name: On Background, color: '#E1E3DF'}
          - {name: On Surface, color: '#E1E3DF'}
          - {name: Surface Variant, color: '#404943'}
          - {name: On Surface Variant, color: '#C0C9C1'}
          - {name: Outline, color: '#8A938C'}
          - {name: Dark Overlay 1, color: 'rgba(208, 232, 216, 0.2)'}
          - {name: Dark Overlay 2, color: 'rgba(208, 232, 216, 0.5)'}
          - {name: Light Overlay 1, color: 'rgba(208, 232, 216, 0.2)'}
          - {name: Light Overlay 2, color: 'rgba(208, 232, 216, 0.5)'}
          - {name: Disabled Container, color: 'rgba(133, 133, 139, 0.12)'}
          - {name: On Disabled, color: '#85858B'}
          - {name: Primary Overlay 1, color: 'rgba(30, 185, 128, 0.05)'}
          - {name: Primary Overlay 2, color: 'rgba(30, 185, 128, 0.08)'}
          - {name: Primary Overlay 3, color: 'rgba(30, 185, 128, 0.11)'}
        - name: Rally Light
          colors:
          - {name: Primary, color: '#006C48'}
          - {name: Primary Container, color: '#00A36C'}
          - {name: On Primary, color: '#FFFFFF'}
          - {name: On Primary Container, color: '#002113'}
          - {name: Secondary, color: '#496455'}
          - {name: Secondary Container, color: '#CBEAD6'}
          - {name: On Secondary, color: '#FFFFFF'}
          - {name: On Secondary Container, color: '#052014'}
          - {name: Tertiary, color: '#326576'}
          - {name: Tertiary Container, color: '#B8EAFF'}
          - {name: On Tertiary, color: '#FFFFFF'}
          - {name: On Tertiary Container, color: '#001F28'}
          - {name: Error, color: '#D64D47'}
          - {name: Background, color: '#FBFDF8'}
          - {name: Surface, color: '#FBFDF8'}
          - {name: On Background, color: '#191C1A'}
          - {name: On Surface, color: '#191C1A'}
          - {name: Surface Variant, color: '#DCE5DD'}
          - {name: On Surface Variant, color: '#404943'}
          - {name: Outline, color: '#707973'}
          - {name: Dark Overlay 1, color: 'rgba(5, 32, 20, 0.8)'}
          - {name: Dark Overlay 2, color: 'rgba(51, 51, 61, 0.12)'}
          - {name: Light Overlay 1, color: 'rgba(255, 255, 255, 0.8)'}
          - {name: Light Overlay 2, color: 'rgba(255, 255, 255, 0.12)'}
          - {name: Disabled Container, color: 'rgba(25, 28, 26, 0.12)'}
          - {name: On Disabled, color: 'rgba(25, 28, 26, 0.38)'}
          - {name: Primary Overlay 1, color: 'rgba(0, 108, 72, 0.05)'}
          - {name: Primary Overlay 2, color: 'rgba(0, 108, 72, 0.08)'}
          - {name: Primary Overlay 3, color: 'rgba(0, 108, 72, 0.11)'}
        - name: Mykonos Light
          colors:
          - {name: Primary, color: '#006874'}
          - {name: Primary Container, color: '#96F0FF'}
          - {name: On Primary, color: '#FFFFFF'}
          - {name: On Primary Container, color: '#001F24'}
          - {name: Secondary, color: '#486367'}
          - {name: Secondary Container, color: '#CBE8ED'}
          - {name: On Secondary, color: '#FFFFFF'}
          - {name: On Secondary Container, color: '#031F23'}
          - {name: Tertiary, color: '#515E80'}
          - {name: Tertiary Container, color: '#DAE2FF'}
          - {name: On Tertiary, color: '#FFFFFF'}
          - {name: On Tertiary Container, color: '#0C1A39'}
          - {name: Error, color: '#BA1A1A'}
          - {name: Background, color: '#FAFDFD'}
          - {name: Surface, color: '#FAFDFD'}
          - {name: On Background, color: '#191C1D'}
          - {name: On Surface, color: '#191C1D'}
          - {name: Surface Variant, color: '#DBE4E6'}
          - {name: On Surface Variant, color: '#3F484A'}
          - {name: Outline, color: '#6F797A'}
          - {name: On Disabled, color: 'rgba(25, 28, 29, 0.38)'}
          - {name: Disabled Container, color: 'rgba(25, 28, 29, 0.12)'}
          - {name: Light Overlay 1, color: 'rgba(255, 255, 255, 0.08)'}
          - {name: Light Overlay 2, color: 'rgba(255, 255, 255, 0.12)'}
          - {name: Dark Overlay 1, color: 'rgba(3, 31, 35, 0.08)'}
          - {name: Dark Overlay 2, color: 'rgba(3, 31, 35, 0.12)'}
          - {name: Primary Overlay 1, color: 'rgba(0, 104, 116, 0.05)'}
          - {name: Primary Overlay 2, color: 'rgba(0, 104, 116, 0.08)'}
          - {name: Primary Overlay 3, color: 'rgba(0, 104, 116, 0.11)'}
        - name: Mykonos Dark
          colors:
          - {name: Primary, color: '#3CD9ED'}
          - {name: Primary Container, color: '#004F57'}
          - {name: On Primary, color: '#00363D'}
          - {name: On Primary Container, color: '#96F0FF'}
          - {name: Secondary, color: '#AFCBD0'}
          - {name: Secondary Container, color: '#314B4F'}
          - {name: On Secondary, color: '#1A3438'}
          - {name: On Secondary Container, color: '#CBE8ED'}
          - {name: Tertiary, color: '#B9C6ED'}
          - {name: Tertiary Container, color: '#394667'}
          - {name: On Tertiary, color: '#23304F'}
          - {name: On Tertiary Container, color: '##DAE2FF'}
          - {name: Error, color: '#FFB4AB'}
          - {name: Background, color: '#191C1D'}
          - {name: Surface, color: '#191C1D'}
          - {name: On Background, color: '#E1E3E3'}
          - {name: On Surface, color: '#E1E3E3'}
          - {name: Surface Variant, color: '#3F484A'}
          - {name: On Surface Variant, color: '#BFC8CA'}
          - {name: Outline, color: '#899294'}
          - {name: On Disabled, color: 'rgba(225, 227, 227, 0.38)'}
          - {name: Disabled Container, color: 'rgba(225, 227, 227, 0.12)'}
          - {name: Light Overlay 1, color: 'rgba(203, 232, 237, 0.08)'}
          - {name: Light Overlay 2, color: 'rgba(203, 232, 237, 0.12)'}
          - {name: Dark Overlay 1, color: 'rgba(203, 232, 237, 0.08)'}
          - {name: Dark Overlay 2, color: 'rgba(203, 232, 237, 0.12)'}
          - {name: Primary Overlay 1, color: 'rgba(60, 217, 237, 0.05)'}
          - {name: Primary Overlay 2, color: 'rgba(60, 217, 237, 0.08)'}
          - {name: Primary Overlay 3, color: 'rgba(60, 217, 237, 0.11)'}
        - name: Manarola Light
          colors:
          - {name: Primary, color: '#9A4523'}
          - {name: Primary Container, color: '#FFDBCF'}
          - {name: On Primary, color: '#FFFFFF'}
          - {name: On Primary Container, color: '#380D00'}
          - {name: Secondary, color: '#77574C'}
          - {name: Secondary Container, color: '#FFDBCF'}
          - {name: On Secondary, color: '#FFFFFF'}
          - {name: On Secondary Container, color: '#2C160D'}
          - {name: Tertiary, color: '#695E2F'}
          - {name: Tertiary Container, color: '#F2E2A7'}
          - {name: On Tertiary, color: '#FFFFFF'}
          - {name: On Tertiary Container, color: '#221B00'}
          - {name: Error, color: '#BA1A1A'}
          - {name: Background, color: '#FFFBFF'}
          - {name: Surface, color: '#FFFBFF'}
          - {name: On Background, color: '#201A18'}
          - {name: On Surface, color: '#201A18'}
          - {name: Surface Variant, color: '#F5DED6'}
          - {name: On Surface Variant, color: '#53433E'}
          - {name: Outline, color: '#85736D'}
          - {name: On Disabled, color: 'rgba(32, 26, 24, 0.38)'}
          - {name: Disabled Container, color: 'rgba(32, 26, 24, 0.12)'}
          - {name: Light Overlay 1, color: 'rgba(255, 255, 255, 0.08)'}
          - {name: Light Overlay 2, color: 'rgba(255, 255, 255, 0.12)'}
          - {name: Dark Overlay 1, color: 'rgba(44, 22, 13, 0.08)'}
          - {name: Dark Overlay 2, color: 'rgba(44, 22, 13, 0.12)'}
          - {name: Primary Overlay 1, color: 'rgba(154, 69, 35, 0.05)'}
          - {name: Primary Overlay 2, color: 'rgba(154, 69, 35, 0.08)'}
          - {name: Primary Overlay 3, color: 'rgba(154, 69, 35, 0.11)'}
        - name: Manarola Dark
          colors:
          - {name: Primary, color: '#FFB59B'}
          - {name: Primary Container, color: '#7B2E0E'}
          - {name: On Primary, color: '#5B1A00'}
          - {name: On Primary Container, color: '#FFDBCF'}
          - {name: Secondary, color: '#E7BDB0'}
          - {name: Secondary Container, color: '#5D4036'}
          - {name: On Secondary, color: '#442A21'}
          - {name: On Secondary Container, color: '#FFDBCF'}
          - {name: Tertiary, color: '#D5C68E'}
          - {name: Tertiary Container, color: '#50461A'}
          - {name: On Tertiary, color: '#393005'}
          - {name: On Tertiary Container, color: '#F2E2A7'}
          - {name: Error, color: '#FFB4AB'}
          - {name: Background, color: '#201A18'}
          - {name: Surface, color: '#201A18'}
          - {name: On Background, color: '#EDE0DC'}
          - {name: On Surface, color: '#EDE0DC'}
          - {name: Surface Variant, color: '#53433E'}
          - {name: On Surface Variant, color: '#D8C2BB'}
          - {name: Outline, color: '#A08D86'}
          - {name: On Disabled, color: 'rgba(237, 224, 220, 0.38)'}
          - {name: Disabled Container, color: 'rgba(237, 224, 220, 0.12)'}
          - {name: Light Overlay 1, color: 'rgba(255, 219, 207, 0.08)'}
          - {name: Light Overlay 2, color: 'rgba(255, 219, 207, 0.12)'}
          - {name: Dark Overlay 1, color: 'rgba(255, 219, 207, 0.08)'}
          - {name: Dark Overlay 2, color: 'rgba(255, 219, 207, 0.12)'}
          - {name: Primary Overlay 1, color: 'rgba(255, 181, 155, 0.05)'}
          - {name: Primary Overlay 2, color: 'rgba(255, 181, 155, 0.08)'}
          - {name: Primary Overlay 3, color: 'rgba(255, 181, 155, 0.11)'}
      colors:
      - {name: Primary, color: '#6750A4'}
      - {name: Primary Container, color: '#EADDFF'}
      - {name: On Primary, color: '#FFFFFF'}
      - {name: On Primary Container, color: '#21005E'}
      - {name: Secondary, color: '#625B71'}
      - {name: Secondary Container, color: '#E8DEF8'}
      - {name: On Secondary, color: '#FFFFFF'}
      - {name: On Secondary Container, color: '#1E192B'}
      - {name: Tertiary, color: '#7D5260'}
      - {name: Tertiary Container, color: '#FFD8E4'}
      - {name: On Tertiary, color: '#FFFFFF'}
      - {name: On Tertiary Container, color: '#370B1E'}
      - {name: Error, color: '#B3261E'}
      - {name: Background, color: '#FFFBFE'}
      - {name: Surface, color: '#FFFBFE'}
      - {name: On Background, color: '#1C1B1F'}
      - {name: On Surface, color: '#1C1B1F'}
      - {name: Surface Variant, color: '#E7E0EC'}
      - {name: On Surface Variant, color: '#49454E'}
      - {name: Outline, color: '#79747E'}
      - {name: On Disabled, color: 'rgba(28, 27, 31, 0.38)'}
      - {name: Disabled Container, color: 'rgba(28, 27, 31, 0.12)'}
      - {name: Light Overlay 1, color: 'rgba(255, 255, 255, 0.08)'}
      - {name: Light Overlay 2, color: 'rgba(255, 255, 255, 0.12)'}
      - {name: Dark Overlay 1, color: 'rgba(30, 25, 43, 0.08)'}
      - {name: Dark Overlay 2, color: 'rgba(30, 25, 43, 0.12)'}
      - {name: Primary Overlay 1, color: 'rgba(103, 80, 164, 0.05)'}
      - {name: Primary Overlay 2, color: 'rgba(103, 80, 164, 0.08)'}
      - {name: Primary Overlay 3, color: 'rgba(103, 80, 164, 0.11)'}
  assets:
  - {name: azure-storage-blob.js, content: ,
    id: '1670780390186292414832975.1793'}
  - {name: standard-page.html, content: PGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90bzozMDAsNDAwLDUwMCIgcmVsPSJzdHlsZXNoZWV0IiByZWw9InByZWxvYWQiIGFzPSJmb250IiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj4KCjxkaXYgY2xhc3M9InN0cnVjdHVyZSI+CiAgPGRpdiBjbGFzcz0iYXBwLWJhciIgYW52aWwtZHJvcC1jb250YWluZXI9Ii5hbnZpbC1jb250YWluZXIiIGFudmlsLWRyb3AtcmVkaXJlY3Q9Ii5wbGFjZWhvbGRlciI+CiAgICA8YSBjbGFzcz0ic2lkZWJhci10b2dnbGUiIGFudmlsLWlmLXNsb3QtZW1wdHk9InRvcC1sZWZ0LWJ0biIgYW52aWwtaGlkZS1pZi1zbG90LWVtcHR5PSJsZWZ0LW5hdiIgYW52aWwtZHJvcC1zbG90PSJ0b3AtbGVmdC1idG4iIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+PGkgY2xhc3M9ImZhIGZhLWJhcnMiPjwvaT48L2E+CiAgICA8YSBjbGFzcz0ic2lkZWJhci10b2dnbGUgYW52aWwtZGVzaWduZXItb25seSIgYW52aWwtaWYtc2xvdC1lbXB0eT0idG9wLWxlZnQtYnRuIiBhbnZpbC1pZi1zbG90LWVtcHR5PSJsZWZ0LW5hdiIgYW52aWwtZHJvcC1zbG90PSJ0b3AtbGVmdC1idG4iPjxpIGNsYXNzPSJmYSBmYS1ibGFuayI+PC9pPjwvYT4KICAgIDxkaXYgY2xhc3M9InRvcC1sZWZ0LWJ0biIgYW52aWwtc2xvdD0idG9wLWxlZnQtYnRuIj48L2Rpdj4KICAgIDxkaXYgY2xhc3M9InRpdGxlIiBhbnZpbC1zbG90PSJ0aXRsZSI+CiAgICAgIDxkaXYgY2xhc3M9InBsYWNlaG9sZGVyIGFudmlsLWRlc2lnbmVyLW9ubHkiIGFudmlsLWlmLXNsb3QtZW1wdHk9InRpdGxlIiBhbnZpbC1kcm9wLWhlcmU+RHJvcCB0aXRsZSBoZXJlPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImFwcC1iYXItbmF2IiBhbnZpbC1zbG90PSJuYXYtcmlnaHQiPgogICAgICA8ZGl2IGNsYXNzPSJwbGFjZWhvbGRlciBhbnZpbC1kZXNpZ25lci1vbmx5IiBhbnZpbC1pZi1zbG90LWVtcHR5PSJuYXYtcmlnaHQiIGFudmlsLWRyb3AtaGVyZT5Ecm9wIGEgRmxvd1BhbmVsIGhlcmU8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBzdHlsZT0iY2xlYXI6Ym90aCI+PC9kaXY+CiAgPC9kaXY+CgogIDxkaXYgY2xhc3M9Im5hdi1ob2xkZXIiPgogICAgPGRpdiBjbGFzcz0ibGVmdC1uYXYgYW52aWwtbWVhc3VyZS10aGlzIiBhbnZpbC1zbG90LXJlcGVhdD0ibGVmdC1uYXYiIGFudmlsLWRyb3AtY29udGFpbmVyPSI+LmFudmlsLWNvbnRhaW5lciI+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImxlZnQtbmF2LXBsYWNlaG9sZGVyIGFudmlsLWRlc2lnbmVyLW9ubHkiIGFudmlsLWlmLXNsb3QtZW1wdHk9ImxlZnQtbmF2IiBhbnZpbC1kcm9wLXNsb3Q9ImxlZnQtbmF2Ij4KICAgICAgPGRpdiBjbGFzcz0icHJvbXB0Ij5UbyBhZGQgYSBzaWRlYmFyLCBkcm9wIGEgQ29sdW1uUGFuZWwgaGVyZS48L2Rpdj4KICAgIDwvZGl2PgogICAgCiAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgPGRpdiBhbnZpbC1zbG90LXJlcGVhdD0iZGVmYXVsdCIgY2xhc3M9ImFudmlsLW1lYXN1cmUtdGhpcyI+PC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9InBsYWNlaG9sZGVyIGRyb3AtaGVyZSIgYW52aWwtaWYtc2xvdC1lbXB0eT0iZGVmYXVsdCIgYW52aWwtZHJvcC1zbG90PSJkZWZhdWx0Ij5Ecm9wIGEgQ29sdW1uUGFuZWwgaGVyZS48L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgoKICA8ZGl2IGNsYXNzPSJuYXYtc2hpZWxkIj48L2Rpdj4KPC9kaXY+CjxkaXYgYW52aWwtZHJvcC1kZWZhdWx0IGFudmlsLWRyb3AtcmVkaXJlY3Q9Ii5wbGFjZWhvbGRlciIgYW52aWwtZHJvcC1jb250YWluZXI9Ii5hbnZpbC1jb250YWluZXIiPjwvZGl2PgogCjxzY3JpcHQ+CiAgdmFyIGxuID0gJCgnLnN0cnVjdHVyZSA+IC5uYXYtaG9sZGVyID4gLmxlZnQtbmF2Jyk7CiAgdmFyIGxucCA9ICQoJy5zdHJ1Y3R1cmUgPiAubmF2LWhvbGRlciA+IC5sZWZ0LW5hdi1wbGFjZWhvbGRlcicpOwogIHZhciBhcHBCYXIgPSAkKCcuYXBwLWJhcicpWzBdOwogIAogIGZ1bmN0aW9uIGhpZGVTaWRlYmFyKCkgewogICAgbG4uYW5pbWF0ZSh7bGVmdDogLWxuLm91dGVyV2lkdGgoKX0sIGZ1bmN0aW9uKCkgewogICAgICBsbi5yZW1vdmVDbGFzcygiaW4tdHJhbnNpdGlvbiBzaG93biIpLmFkZENsYXNzKCJoaWRkZW4iKTsKICAgICAgJCgnLm5hdi1zaGllbGQnKS5yZW1vdmVDbGFzcygic2hvd24iKTsKICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ3Jlc2l6ZScpOwogICAgfSk7CiAgICBpZiAod2luZG93LmlubmVyV2lkdGggPiA5OTgpIHsgCiAgICAgICQoJy5jb250ZW50JykuYW5pbWF0ZSh7J21hcmdpbi1sZWZ0JzowfSwgZnVuY3Rpb24oKXt9KQogICAgfQogIH0KICAKICBmdW5jdGlvbiBzaG93U2lkZWJhcigpIHsKICAgICQoJy5uYXYtc2hpZWxkJykuYWRkQ2xhc3MoInNob3duIik7CiAgICBsbi5hZGRDbGFzcygic2hvd24iKS5yZW1vdmVDbGFzcygiaGlkZGVuIikuY3NzKHtsZWZ0OiAiLTEwMCUifSkuY3NzKHtsZWZ0OiAtbG4ub3V0ZXJXaWR0aCgpfSkuYW5pbWF0ZSh7bGVmdDogMH0sIGZ1bmN0aW9uKCkgewogICAgICBsbi5yZW1vdmVDbGFzcygiaW4tdHJhbnNpdGlvbiIpOwogICAgfSk7CiAgICAkKHdpbmRvdykudHJpZ2dlcigncmVzaXplJyk7CiAgICBpZiAod2luZG93LmlubmVyV2lkdGggPiA5OTgpIHsKICAgICAgJCgnLmNvbnRlbnQnKS5hbmltYXRlKHsnbWFyZ2luLWxlZnQnOiBsbi5vdXRlcldpZHRoKCkudG9TdHJpbmcoKSArICdweCd9LCBmdW5jdGlvbigpe30pCiAgICB9IAogIH0KICAKICAkKCcuc2lkZWJhci10b2dnbGUsIC5uYXYtc2hpZWxkJykub2ZmKCdjbGljaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkgeyAKICAgIGlmIChsbi5pcygiOnZpc2libGUiKSB8fCAkKCcubmF2LXNoaWVsZCcpLmlzKCIuc2hvd24iKSkgewogICAgICBoaWRlU2lkZWJhcigpOwogICAgfSBlbHNlIGlmKCFsbi5pcygiOmVtcHR5IikpIHsKICAgICAgc2hvd1NpZGViYXIoKTsKICAgIH0KICB9KTsKICAkKCcubGVmdC1uYXYnKS5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgJ2EsIGJ1dHRvbicsIGZ1bmN0aW9uKCkgewogICAgaWYgKCQoJy5uYXYtc2hpZWxkJykuaXMoIjp2aXNpYmxlIikpIHsKICAgICAgJCgnLm5hdi1zaGllbGQnKS50cmlnZ2VyKCdjbGljaycpOwogICAgfQogIH0pOwogIAogIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICBpZiAoYXBwQmFyLmNsYXNzTGlzdC5jb250YWlucygnc2Nyb2xsZWQnKSkgewogICAgICBpZiAod2luZG93LnNjcm9sbFkgPT09IDApIHsKICAgICAgICBhcHBCYXIuY2xhc3NMaXN0LnJlbW92ZSgnc2Nyb2xsZWQnKQogICAgCX0gCiAgICB9CiAgICBlbHNlIHsKICAgICAgYXBwQmFyLmNsYXNzTGlzdC5hZGQoJ3Njcm9sbGVkJykKICAgIH0KICB9KTsKCiAgZnVuY3Rpb24gYWRkTWFyZ2luVG9Db250ZW50KCkgewogICAgLy9jaGVjayBpZiB0aGVyZSBpcyBhIGZyZWUgYmFubmVyIGFuZCBzZXQgdGhlIHRvcCBtYXJnaW4gYWNjb3JkaW5pbmdseQogICAgaWYgKCQoJyNhbnZpbC1oZWFkZXInKS5jc3MoJ2Rpc3BsYXknKSA9PSAnYmxvY2snKSB7CiAgICAgIHZhciB0b3BNYXJnaW4gPSBhcHBCYXIuY2xpZW50SGVpZ2h0ICsgNTAKICAgIH0gZWxzZSB7CiAgICAgIHZhciB0b3BNYXJnaW4gPSBhcHBCYXIuY2xpZW50SGVpZ2h0CiAgICB9CiAgICAvL3RoZSBsZWZ0LW5hdi1wbGFjZWhvbGRlciBpbiB0aGUgZGVzaWduZXIgbmVlZHMgdG8gc2hpZnQgZG93biBmb3IgdGhlIGFwcCBiYXIKICAgIGxucC5jc3Moeyd0b3AnOiBhcHBCYXIuY2xpZW50SGVpZ2h0LnRvU3RyaW5nKCkgKyAncHgnfSkKCiAgICAvL2lmIHRoZSB3aW5kb3cgaXMgc21hbGwKICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IDk5OSkgewogICAgICAvL2lmIGluIEFudmlsIGRlc2lnbmVyCiAgICAgIGlmICh3aW5kb3cuYW52aWxJbkRlc2lnbmVyKSB7CiAgICAgICAgLy9hZGQgbGVmdCBtYXJnaW4gdG8gY29udGVudCB0byBtYWtlIHJvb20gZm9yIGxlZnQtbmF2IG9yIGxlZnQtbmF2LXBsYWNlaG9sZGVyCiAgICAgICAgJCgnLmNvbnRlbnQnKS5jc3MoeydtYXJnaW4tbGVmdCc6IE1hdGgubWF4KGxuLm91dGVyV2lkdGgoKSwgbG5wLm91dGVyV2lkdGgoKSkudG9TdHJpbmcoKSArICdweCd9KTsKICAgICAgICAkKCcuY29udGVudCcpLmNzcyh7J21hcmdpbi10b3AnOiBhcHBCYXIuY2xpZW50SGVpZ2h0LnRvU3RyaW5nKCkgKyAncHgnfSkKICAgICAgICBsbi5jc3Moeyd0b3AnOiB0b3BNYXJnaW4udG9TdHJpbmcoKSArICdweCd9KQogICAgICB9IGVsc2UgewogICAgICAgIC8vaWYgbm90IGluIEFudmlsIGRlc2lnbmVyLCBjb250ZW50IGdldHMgbm8gbGVmdCBtYXJnaW4gYmVjYXVzZSBsZWZ0LW5hdiB3aWxsIGJlIGEgbW9kYWwgb3ZlcmxheQogICAgICAgICQoJy5jb250ZW50JykuY3NzKHsnbWFyZ2luLWxlZnQnOiAnMHB4J30pOwogICAgICAgIGxuLmNzcyh7J3RvcCc6ICcwcHgnfSkKICAgICAgICAvL2FkZCB0b3AgbWFyZ2luIHRvIGNvbnRlbnQKICAgICAgICAkKCcuY29udGVudCcpLmNzcyh7J21hcmdpbi10b3AnOiB0b3BNYXJnaW4udG9TdHJpbmcoKSArICdweCd9KTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgLy9pZiB0aGUgd2luZG93IGlzIGJpZywgYWRkIG1hcmdpbiB0byBjb250ZW50IGFuZCBsZWZ0LW5hdiBmb3IgYXBwIGJhcgogICAgICAkKCcuY29udGVudCcpLmNzcyh7J21hcmdpbi10b3AnOiBhcHBCYXIuY2xpZW50SGVpZ2h0LnRvU3RyaW5nKCkgKyAncHgnfSk7CiAgICAgIGxuLmNzcyh7J3RvcCc6IHRvcE1hcmdpbi50b1N0cmluZygpICsgJ3B4J30pCiAgICAgIGlmICh3aW5kb3cuYW52aWxJbkRlc2lnbmVyKSB7CiAgICAgICAgLy9pZiBpbiB0aGUgZGVzaWduZXIsIGFkZCBsZWZ0IG1hcmdpbiBmb3IgZWl0aGVyIHRoZSBsZWZ0LW5hdiBvciB0aGUgcGxhY2Vob2xkZXIKICAgICAgICAkKCcuY29udGVudCcpLmNzcyh7J21hcmdpbi1sZWZ0JzogTWF0aC5tYXgobG4ub3V0ZXJXaWR0aCgpLCBsbnAub3V0ZXJXaWR0aCgpKS50b1N0cmluZygpICsgJ3B4J30pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vaWYgbm90IGluIHRoZSBkZXNpZ25lciwgb25seSBhZGQgbWFyZ2luIGZvciB0aGUgbGVmdC1uYXYgYmVjYXVzZSBwbGFjZWhvbGRlciBzdGlsbCBoYXMgYSB3aWR0aCBvdXRzaWRlIG9mIGRlc2lnbmVyCiAgICAgICAgJCgnLmNvbnRlbnQnKS5jc3MoeydtYXJnaW4tbGVmdCc6IGxuLm91dGVyV2lkdGgoKSArICdweCd9KTsKICAgICAgfQogICAgfQogIH0KICAKICBhZGRNYXJnaW5Ub0NvbnRlbnQoKQogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBhZGRNYXJnaW5Ub0NvbnRlbnQpOwogCjwvc2NyaXB0Pg==,
    id: 37AQTKKKZQA7S5VAK4PTPFB45HYVG4RS}
  - {name: theme.css, content: ,
    id: VUBUFQPFKPVPWXMZKEQPUZHP6CTMBJ55}
server_modules: []
renamed: true
